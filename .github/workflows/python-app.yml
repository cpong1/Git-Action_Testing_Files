# Name and description of the workflow
name: Python Application CI/CD

# Trigger the workflow on pushes to the 'main' branch
on:
  push:
    branches: [main]

# Define permissions for workflow execution
permissions:
  contents: read

# Define the jobs to be executed
jobs:
  run-test:
    # Set up a matrix for different operating systems (e.g., Ubuntu)
    strategy:
      matrix:
        os: [ubuntu-latest]

    # Define the runner environment for the job
    runs-on: ${{ matrix.os }}

    # Define the steps to be executed within the job
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          python -m pip install -U pip
          pip install pytest
          pip install selenium==3.141.0
          pip install webdriver_manager
          pip install flask flask_sqlalchemy flask_cors
          pip install mysql-connector-python

      - name: Set Up MySQL Database (Docker)
        uses: mirromutth/mysql-action@v1.1
        with:
          host port: 3306
          container port: 3306
          character set server: 'utf8'
          collation server: 'utf8_general_ci'
          mysql version: '8.0'
          mysql database: 'SPM_KUIH'
          mysql root password: ''
          mysql user: 'root'
          mysql password: 'root'

      - name: Install MySQL Client
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client
          
      - name: Start MySQL Service
        run: |
          sudo /etc/init.d/mysql start

      - name: Install Additional Dependencies
        run: |
          sudo apt-get install libmysqlclient-dev
          sudo apt-get install zlib1g-dev
          pip3 install mysqlclient
          pip3 install SQLAlchemy
          sudo systemctl start mysql.service
          cat database/test_data.sql | sudo mysql -u root --password=root

      - name: Check Database Accessibility
        run: python tests/check_db_access.py

      - name: Start Flask Application
        run: |
          export FLASK_APP=app.py
          export FLASK_ENV=development
          flask run --host=0.0.0.0 --port=5100 &

      - name: Run Python Tests
        run: pytest tests/end_to_end/test_script.py

      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        with:
          name: Test Results
          path: pytest-results.xml
